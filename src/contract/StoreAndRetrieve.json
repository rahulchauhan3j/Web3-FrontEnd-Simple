{
  "address": "0x2279B7A0a67DB372996a5FaB50D91eAA73d2eBe6",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "isVerified",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "retrievePersonData",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_firstName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_lastName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_nationalId",
          "type": "string"
        }
      ],
      "name": "storePersonData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_verified",
          "type": "bool"
        }
      ],
      "name": "verifyPerson",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x460871ac2b319f2dceea29b52ae5a7e01de4055e4b792da9db21e3ca8b839357",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x2279B7A0a67DB372996a5FaB50D91eAA73d2eBe6",
    "transactionIndex": 0,
    "gasUsed": "855387",
    "logsBloom": "0x
    "blockHash": "0xd7bf5d0470ac336548b9c2dba055a21fc0e86fe4c1963a6cde7b1cc56ec5b947",
    "transactionHash": "0x460871ac2b319f2dceea29b52ae5a7e01de4055e4b792da9db21e3ca8b839357",
    "logs": [],
    "blockNumber": 9,
    "cumulativeGasUsed": "855387",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "72f1d97c94ca024916eaa8e7d4a1598a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isVerified\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"retrievePersonData\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_firstName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_lastName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_nationalId\",\"type\":\"string\"}],\"name\":\"storePersonData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_verified\",\"type\":\"bool\"}],\"name\":\"verifyPerson\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Rahul Chauhan\",\"kind\":\"dev\",\"methods\":{\"isVerified(address)\":{\"params\":{\"_address\":\"(address of the person to be checked)\"},\"returns\":{\"_0\":\"boolean flag to confirm if person is verified (true) or un-verified (false)\"}},\"retrievePersonData(address)\":{\"params\":{\"_address\":\"(address of the person whose information is to be retrieved)\"},\"returns\":{\"_0\":\"firstName of the person\",\"_1\":\"lastName of the person\",\"_2\":\"nationalId of the person\"}},\"storePersonData(address,string,string,string)\":{\"params\":{\"_address\":\"(address of the person being added to storage)\",\"_firstName\":\"(first name of the person being added to storage)\",\"_lastName\":\"(last name of the person being added to storage)\",\"_nationalId\":\"(national id of the person being added to storage)\"}},\"verifyPerson(address,bool)\":{\"params\":{\"_address\":\"(address of the person to be verified/un-verified)\",\"_verified\":\"(flag - verify/un-verify)\"}}},\"stateVariables\":{\"personData\":{\"details\":\"mappings to store address to person relationship.\"}},\"title\":\"A simple contract to store and retrieve person information.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"isVerified(address)\":{\"notice\":\"This funtion checks if a person is verified or not\"},\"retrievePersonData(address)\":{\"notice\":\"This function retrieves person information based on address supplied\"},\"storePersonData(address,string,string,string)\":{\"notice\":\"This is a function to store person data\"},\"verifyPerson(address,bool)\":{\"notice\":\"This function is used to verify/un-verify a person based on his/her address\"}},\"notice\":\"This is a basic contract created as part of Module 2 assessment of Intermediate Solidity Course of Metacrafters.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StoreAndRetrieve.sol\":\"StoreAndRetrieve\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/StoreAndRetrieve.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\n/// @title A simple contract to store and retrieve person information.\\n/// @author Rahul Chauhan\\n/// @notice This is a basic contract created as part of Module 2 assessment of Intermediate Solidity Course of Metacrafters.\\n\\ncontract StoreAndRetrieve {\\n  /// @dev This is a struct type to store attributes of a person\\n  struct person {\\n    string firstName;\\n    string lastName;\\n    string nationalId;\\n    bool verified;\\n  }\\n\\n  /// @dev mappings to store address to person relationship.\\n  mapping(address => person) personData;\\n  mapping(address => bool) personExists;\\n\\n  /// @notice This is a function to store person data\\n  /// @param _address (address of the person being added to storage)\\n  /// @param _firstName (first name of the person being added to storage)\\n  /// @param _lastName (last name of the person being added to storage)\\n  /// @param _nationalId (national id of the person being added to storage)\\n  function storePersonData(\\n    address _address,\\n    string memory _firstName,\\n    string memory _lastName,\\n    string memory _nationalId\\n  ) public {\\n    personData[_address] = person(_firstName, _lastName, _nationalId, false);\\n    personExists[_address] = true;\\n  }\\n\\n  /// @notice This function retrieves person information based on address supplied\\n  /// @param _address (address of the person whose information is to be retrieved)\\n  /// @return firstName of the person\\n  /// @return lastName of the person\\n  /// @return nationalId of the person\\n  function retrievePersonData(\\n    address _address\\n  ) public view returns (string memory, string memory, string memory) {\\n    require(personExists[_address] == true, \\\"Person Does Not Exists\\\");\\n    return (\\n      personData[_address].firstName,\\n      personData[_address].lastName,\\n      personData[_address].nationalId\\n    );\\n  }\\n\\n  /// @notice This function is used to verify/un-verify a person based on his/her address\\n  /// @param _address (address of the person to be verified/un-verified)\\n  /// @param _verified (flag - verify/un-verify)\\n  function verifyPerson(address _address, bool _verified) public {\\n    require(personExists[_address] == true, \\\"Person Does Not Exists\\\");\\n    personData[_address].verified = _verified;\\n  }\\n\\n  /// @notice This funtion checks if a person is verified or not\\n  /// @param _address (address of the person to be checked)\\n  /// @return boolean flag to confirm if person is verified (true) or un-verified (false)\\n  function isVerified(address _address) public view returns (bool) {\\n    require(personExists[_address] == true, \\\"Person Does Not Exists\\\");\\n    return personData[_address].verified;\\n  }\\n}\\n\",\"keccak256\":\"0xd5b0552c23ba98fbfb1a76c9a48947aba92230dd5a89ee783b47e5b2c32ae600\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610e8d806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063a4e0917c14610051578063b471f2a61461006d578063b9209e331461009f578063ed18c070146100cf575b600080fd5b61006b600480360381019061006691906108ae565b6100eb565b005b61008760048036038101906100829190610969565b61020f565b60405161009693929190610a15565b60405180910390f35b6100b960048036038101906100b49190610969565b61051b565b6040516100c69190610a7c565b60405180910390f35b6100e960048036038101906100e49190610ac3565b610606565b005b6040518060800160405280848152602001838152602001828152602001600015158152506000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000190816101629190610d19565b5060208201518160010190816101789190610d19565b50604082015181600201908161018e9190610d19565b5060608201518160030160006101000a81548160ff02191690831515021790555090505060018060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050505050565b606080606060011515600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515146102a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161029e90610e37565b60405180910390fd5b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000016000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001016000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020182805461037690610b32565b80601f01602080910402602001604051908101604052809291908181526020018280546103a290610b32565b80156103ef5780601f106103c4576101008083540402835291602001916103ef565b820191906000526020600020905b8154815290600101906020018083116103d257829003601f168201915b5050505050925081805461040290610b32565b80601f016020809104026020016040519081016040528092919081815260200182805461042e90610b32565b801561047b5780601f106104505761010080835404028352916020019161047b565b820191906000526020600020905b81548152906001019060200180831161045e57829003601f168201915b5050505050915080805461048e90610b32565b80601f01602080910402602001604051908101604052809291908181526020018280546104ba90610b32565b80156105075780601f106104dc57610100808354040283529160200191610507565b820191906000526020600020905b8154815290600101906020018083116104ea57829003601f168201915b505050505090509250925092509193909250565b600060011515600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515146105b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105a790610e37565b60405180910390fd5b6000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160009054906101000a900460ff169050919050565b60011515600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514610699576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161069090610e37565b60405180910390fd5b806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160006101000a81548160ff0219169083151502179055505050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006107358261070a565b9050919050565b6107458161072a565b811461075057600080fd5b50565b6000813590506107628161073c565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6107bb82610772565b810181811067ffffffffffffffff821117156107da576107d9610783565b5b80604052505050565b60006107ed6106f6565b90506107f982826107b2565b919050565b600067ffffffffffffffff82111561081957610818610783565b5b61082282610772565b9050602081019050919050565b82818337600083830152505050565b600061085161084c846107fe565b6107e3565b90508281526020810184848401111561086d5761086c61076d565b5b61087884828561082f565b509392505050565b600082601f83011261089557610894610768565b5b81356108a584826020860161083e565b91505092915050565b600080600080608085870312156108c8576108c7610700565b5b60006108d687828801610753565b945050602085013567ffffffffffffffff8111156108f7576108f6610705565b5b61090387828801610880565b935050604085013567ffffffffffffffff81111561092457610923610705565b5b61093087828801610880565b925050606085013567ffffffffffffffff81111561095157610950610705565b5b61095d87828801610880565b91505092959194509250565b60006020828403121561097f5761097e610700565b5b600061098d84828501610753565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156109d05780820151818401526020810190506109b5565b60008484015250505050565b60006109e782610996565b6109f181856109a1565b9350610a018185602086016109b2565b610a0a81610772565b840191505092915050565b60006060820190508181036000830152610a2f81866109dc565b90508181036020830152610a4381856109dc565b90508181036040830152610a5781846109dc565b9050949350505050565b60008115159050919050565b610a7681610a61565b82525050565b6000602082019050610a916000830184610a6d565b92915050565b610aa081610a61565b8114610aab57600080fd5b50565b600081359050610abd81610a97565b92915050565b60008060408385031215610ada57610ad9610700565b5b6000610ae885828601610753565b9250506020610af985828601610aae565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610b4a57607f821691505b602082108103610b5d57610b5c610b03565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302610bc57fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610b88565b610bcf8683610b88565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000610c16610c11610c0c84610be7565b610bf1565b610be7565b9050919050565b6000819050919050565b610c3083610bfb565b610c44610c3c82610c1d565b848454610b95565b825550505050565b600090565b610c59610c4c565b610c64818484610c27565b505050565b5b81811015610c8857610c7d600082610c51565b600181019050610c6a565b5050565b601f821115610ccd57610c9e81610b63565b610ca784610b78565b81016020851015610cb6578190505b610cca610cc285610b78565b830182610c69565b50505b505050565b600082821c905092915050565b6000610cf060001984600802610cd2565b1980831691505092915050565b6000610d098383610cdf565b9150826002028217905092915050565b610d2282610996565b67ffffffffffffffff811115610d3b57610d3a610783565b5b610d458254610b32565b610d50828285610c8c565b600060209050601f831160018114610d835760008415610d71578287015190505b610d7b8582610cfd565b865550610de3565b601f198416610d9186610b63565b60005b82811015610db957848901518255600182019150602085019450602081019050610d94565b86831015610dd65784890151610dd2601f891682610cdf565b8355505b6001600288020188555050505b505050505050565b7f506572736f6e20446f6573204e6f742045786973747300000000000000000000600082015250565b6000610e216016836109a1565b9150610e2c82610deb565b602082019050919050565b60006020820190508181036000830152610e5081610e14565b905091905056fea2646970667358221220c7b646cca94c6920783e0382ef4671d96de60f805ec64abc7c3dfb68b1cd985764736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c8063a4e0917c14610051578063b471f2a61461006d578063b9209e331461009f578063ed18c070146100cf575b600080fd5b61006b600480360381019061006691906108ae565b6100eb565b005b61008760048036038101906100829190610969565b61020f565b60405161009693929190610a15565b60405180910390f35b6100b960048036038101906100b49190610969565b61051b565b6040516100c69190610a7c565b60405180910390f35b6100e960048036038101906100e49190610ac3565b610606565b005b6040518060800160405280848152602001838152602001828152602001600015158152506000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000190816101629190610d19565b5060208201518160010190816101789190610d19565b50604082015181600201908161018e9190610d19565b5060608201518160030160006101000a81548160ff02191690831515021790555090505060018060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050505050565b606080606060011515600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515146102a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161029e90610e37565b60405180910390fd5b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000016000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001016000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020182805461037690610b32565b80601f01602080910402602001604051908101604052809291908181526020018280546103a290610b32565b80156103ef5780601f106103c4576101008083540402835291602001916103ef565b820191906000526020600020905b8154815290600101906020018083116103d257829003601f168201915b5050505050925081805461040290610b32565b80601f016020809104026020016040519081016040528092919081815260200182805461042e90610b32565b801561047b5780601f106104505761010080835404028352916020019161047b565b820191906000526020600020905b81548152906001019060200180831161045e57829003601f168201915b5050505050915080805461048e90610b32565b80601f01602080910402602001604051908101604052809291908181526020018280546104ba90610b32565b80156105075780601f106104dc57610100808354040283529160200191610507565b820191906000526020600020905b8154815290600101906020018083116104ea57829003601f168201915b505050505090509250925092509193909250565b600060011515600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515146105b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105a790610e37565b60405180910390fd5b6000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160009054906101000a900460ff169050919050565b60011515600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514610699576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161069090610e37565b60405180910390fd5b806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160006101000a81548160ff0219169083151502179055505050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006107358261070a565b9050919050565b6107458161072a565b811461075057600080fd5b50565b6000813590506107628161073c565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6107bb82610772565b810181811067ffffffffffffffff821117156107da576107d9610783565b5b80604052505050565b60006107ed6106f6565b90506107f982826107b2565b919050565b600067ffffffffffffffff82111561081957610818610783565b5b61082282610772565b9050602081019050919050565b82818337600083830152505050565b600061085161084c846107fe565b6107e3565b90508281526020810184848401111561086d5761086c61076d565b5b61087884828561082f565b509392505050565b600082601f83011261089557610894610768565b5b81356108a584826020860161083e565b91505092915050565b600080600080608085870312156108c8576108c7610700565b5b60006108d687828801610753565b945050602085013567ffffffffffffffff8111156108f7576108f6610705565b5b61090387828801610880565b935050604085013567ffffffffffffffff81111561092457610923610705565b5b61093087828801610880565b925050606085013567ffffffffffffffff81111561095157610950610705565b5b61095d87828801610880565b91505092959194509250565b60006020828403121561097f5761097e610700565b5b600061098d84828501610753565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156109d05780820151818401526020810190506109b5565b60008484015250505050565b60006109e782610996565b6109f181856109a1565b9350610a018185602086016109b2565b610a0a81610772565b840191505092915050565b60006060820190508181036000830152610a2f81866109dc565b90508181036020830152610a4381856109dc565b90508181036040830152610a5781846109dc565b9050949350505050565b60008115159050919050565b610a7681610a61565b82525050565b6000602082019050610a916000830184610a6d565b92915050565b610aa081610a61565b8114610aab57600080fd5b50565b600081359050610abd81610a97565b92915050565b60008060408385031215610ada57610ad9610700565b5b6000610ae885828601610753565b9250506020610af985828601610aae565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610b4a57607f821691505b602082108103610b5d57610b5c610b03565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302610bc57fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610b88565b610bcf8683610b88565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000610c16610c11610c0c84610be7565b610bf1565b610be7565b9050919050565b6000819050919050565b610c3083610bfb565b610c44610c3c82610c1d565b848454610b95565b825550505050565b600090565b610c59610c4c565b610c64818484610c27565b505050565b5b81811015610c8857610c7d600082610c51565b600181019050610c6a565b5050565b601f821115610ccd57610c9e81610b63565b610ca784610b78565b81016020851015610cb6578190505b610cca610cc285610b78565b830182610c69565b50505b505050565b600082821c905092915050565b6000610cf060001984600802610cd2565b1980831691505092915050565b6000610d098383610cdf565b9150826002028217905092915050565b610d2282610996565b67ffffffffffffffff811115610d3b57610d3a610783565b5b610d458254610b32565b610d50828285610c8c565b600060209050601f831160018114610d835760008415610d71578287015190505b610d7b8582610cfd565b865550610de3565b601f198416610d9186610b63565b60005b82811015610db957848901518255600182019150602085019450602081019050610d94565b86831015610dd65784890151610dd2601f891682610cdf565b8355505b6001600288020188555050505b505050505050565b7f506572736f6e20446f6573204e6f742045786973747300000000000000000000600082015250565b6000610e216016836109a1565b9150610e2c82610deb565b602082019050919050565b60006020820190508181036000830152610e5081610e14565b905091905056fea2646970667358221220c7b646cca94c6920783e0382ef4671d96de60f805ec64abc7c3dfb68b1cd985764736f6c63430008110033",
  "devdoc": {
    "author": "Rahul Chauhan",
    "kind": "dev",
    "methods": {
      "isVerified(address)": {
        "params": {
          "_address": "(address of the person to be checked)"
        },
        "returns": {
          "_0": "boolean flag to confirm if person is verified (true) or un-verified (false)"
        }
      },
      "retrievePersonData(address)": {
        "params": {
          "_address": "(address of the person whose information is to be retrieved)"
        },
        "returns": {
          "_0": "firstName of the person",
          "_1": "lastName of the person",
          "_2": "nationalId of the person"
        }
      },
      "storePersonData(address,string,string,string)": {
        "params": {
          "_address": "(address of the person being added to storage)",
          "_firstName": "(first name of the person being added to storage)",
          "_lastName": "(last name of the person being added to storage)",
          "_nationalId": "(national id of the person being added to storage)"
        }
      },
      "verifyPerson(address,bool)": {
        "params": {
          "_address": "(address of the person to be verified/un-verified)",
          "_verified": "(flag - verify/un-verify)"
        }
      }
    },
    "stateVariables": {
      "personData": {
        "details": "mappings to store address to person relationship."
      }
    },
    "title": "A simple contract to store and retrieve person information.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "isVerified(address)": {
        "notice": "This funtion checks if a person is verified or not"
      },
      "retrievePersonData(address)": {
        "notice": "This function retrieves person information based on address supplied"
      },
      "storePersonData(address,string,string,string)": {
        "notice": "This is a function to store person data"
      },
      "verifyPerson(address,bool)": {
        "notice": "This function is used to verify/un-verify a person based on his/her address"
      }
    },
    "notice": "This is a basic contract created as part of Module 2 assessment of Intermediate Solidity Course of Metacrafters.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 17,
        "contract": "contracts/StoreAndRetrieve.sol:StoreAndRetrieve",
        "label": "personData",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_struct(person)11_storage)"
      },
      {
        "astId": 21,
        "contract": "contracts/StoreAndRetrieve.sol:StoreAndRetrieve",
        "label": "personExists",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(person)11_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct StoreAndRetrieve.person)",
        "numberOfBytes": "32",
        "value": "t_struct(person)11_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(person)11_storage": {
        "encoding": "inplace",
        "label": "struct StoreAndRetrieve.person",
        "members": [
          {
            "astId": 4,
            "contract": "contracts/StoreAndRetrieve.sol:StoreAndRetrieve",
            "label": "firstName",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 6,
            "contract": "contracts/StoreAndRetrieve.sol:StoreAndRetrieve",
            "label": "lastName",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 8,
            "contract": "contracts/StoreAndRetrieve.sol:StoreAndRetrieve",
            "label": "nationalId",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 10,
            "contract": "contracts/StoreAndRetrieve.sol:StoreAndRetrieve",
            "label": "verified",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      }
    }
  }
}